# Tmux configuration
#
# Greatly inspired from :
#   - https://github.com/gpakosz/.tmux
#   - https://github.com/samoshkin/tmux-config

# General TMUX configuration
# =============================================================================

# Set the default value of the TERM environment variable.
set -g default-terminal "screen-256color"
if 'infocmp -x tmux-256color &> /dev/null' \
  'set -g default-terminal "tmux-256color"'

# Set the time in milliseconds for which tmux waits after an escape is input to
# determine if it is part of a function or meta key sequences.
set -g escape-time 10

# Allow multiple commands to be entered without pressing the prefix-key again in
# the specified time milliseconds (the default is 500).
set -g repeat-time 500

# Set the maximum number of lines held in window history.
set -g history-limit 20000

# Set the amount of time for which status line messages and other on-screen
# indicators are displayed.
set -g display-time 5000

# A pane with this flag set is not destroyed when the program running in it
# exits.
set -g remain-on-exit off

# Allow programs in the pane to change the window name using a terminal escape
# sequence (\ek...\e\\).
setw -g allow-rename off

# Control automatic window renaming.
setw -g automatic-rename off

# Aggressively resize the chosen window.
setw -g aggressive-resize on

# Attempt to set the client terminal title#
set -g set-titles on

# String used to set the client terminal title if set-titles is on.
set -g set-titles-string "#S:#W"

# Set the base index from which an unused index should be searched when a new
# window is created.
set -g base-index 1

# Like base-index, but set the starting index for pane numbers.
setw -g pane-base-index 1

# If on, when a window is closed in a session, automatically renumber the other
# windows in numerical order.
set -g renumber-windows on

# Set the time in milliseconds for which the indicators shown by the
# display-panes command appear.
set -g display-panes-time 1000

# Update the status line every interval seconds.
set -g status-interval 5

# If on, tmux captures the mouse and allows mouse events to be bound as key
# bindings.
set -g mouse on

# If on, display a message instead of sending a bell when activity occurs in a
# window for which the monitor-activity window option is enabled.  If set to
# both, a bell and a message are produced.
set -g visual-activity on

# Allowing xterm sequence such as Ctrl+Left-Arrow behave differently from just
# Left-Arrow
setw -g xterm-keys on

# Set Alt-a (Meta-a) as the secondary prefix making C-b and M-a equivalent.
set -g prefix2 M-a

# Key bindings
# =============================================================================
# Unbind default key bindings, we're going to override
#unbind -a
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
#unbind }    # swap-pane -D
#unbind {    # swap-pane -U
#  unbind [    # paste-buffer
#  unbind ]
#  unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
#  unbind M-n  # next window with alert
#  unbind M-p  # next window with alert
#  unbind o    # focus thru panes
#  unbind &    # kill-window
#  unbind "#"  # list-buffer
#  unbind =    # choose-buffer
#  unbind z    # zoom-pane
#  unbind M-Up  # resize 5 rows up
#  unbind M-Down # resize 5 rows down
#  unbind M-Right # resize 5 rows right
#  unbind M-Left # resize 5 rows left


# Reload tmux configuration
bind M-r source-file ~/.tmux.conf \; display "Config reloaded"

# New window and retain cwd
bind c new-window -c "#{pane_current_path}"
bind -n M-t new-window -c "#{pane_current_path}"

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
# Warning !!! Vertical/Horizontal shortcuts are inversed. My inner logic is
# based from the orientation of the split line (i.e. when splitting vertically,
# the split line is horizontal and vice-versa).
bind v split-window -h -c "#{pane_current_path}"
bind h split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r M-j next-window
bind -r M-k previous-window
bind -n -r M-Tab last-window
bind -r L swap-pane -U
bind -r H swap-pane -D

# Pane resize and zoom
bind -n -r M-h resize-pane -L 5
bind -n -r M-j resize-pane -D 5
bind -n -r M-k resize-pane -U 5
bind -n -r M-l resize-pane -R 5
bind -n -r M-m resize-pane -Z

# Kill pane/window/session shortcuts
bind -n M-w confirm-before -p "Kill pane #P? (y/n)" "kill-pane"
bind -n M-q confirm-before -p "Kill windows #W? (y/n)" "kill-window"
bind -n M-x confirm-before -p "Kill session #S? (y/n)" "kill-session"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
  'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
  'detach'

# Window monitoring for activity and silence
# =============================================================================
# When enabled, focus events are requested from the terminal if supported and
# passed through to applications running in tmux.
set focus-events on

# Monitor for activity in the window. Windows with activity are highlighted in
# the status line.
set -g monitor-activity off
bind m setw monitor-activity \; \
  display 'Monitor window activity [#{?monitor-activity,ON,OFF}]'

# Monitor for silence (no activity) in the window within interval seconds.
set -g monitor-silence 0
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Copy mode, history, scroll and clipboard
# =============================================================================
set -g @copy_use_osc52_fallback on

# Use vi or emacs-style key bindings in copy mode.
set -g mode-keys vi

bind p paste-buffer
bind C-p choose-buffer

# Trigger copy-mode
bind -n M-Escape copy-mode

# Scroll up/down by 1 line, half screen, whole screen
# bind -T copy-mode-vi k send-keys -X scroll-up
# bind -T copy-mode-vi j send-keys -X scroll-down
# bind -T copy-mode-vi C-u send-keys -X halfpage-up
# bind -T copy-mode-vi C-d send-keys -X halfpage-down

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to
# "2" (default is 5)
bind -T copy-mode-vi WheelUpPane    select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane  select-pane \; send-keys -X -N 2 scroll-down

# Sele text
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi V send-keys -X rectangle-toggle
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel
bind -T copy-mode-vi Y send-keys -X copy-line

# Colors configuration
# =============================================================================
# 16 Colors definition using
# [base16-python-builder](https://github.com/InspectorMustache/base16-builder-python)

# %% base16_template: tmux#default %%

color_00="#212121" # Base 00 - Black
color_01="#F44336" # Base 08 - Red
color_02="#4CAF50" # Base 0B - Green
color_03="#FFEB3B" # Base 0A - Yellow
color_04="#2196F3" # Base 0D - Blue
color_05="#9C27B0" # Base 0E - Magenta
color_06="#00BCD4" # Base 0C - Cyan
color_07="#FAFAFA" # Base 05 - White
color_08="#37474F" # Base 03 - Bright Black
color_09=$color_01 # Base 08 - Bright Red
color_10=$color_02 # Base 0B - Bright Green
color_11=$color_03 # Base 0A - Bright Yellow
color_12=$color_04 # Base 0D - Bright Blue
color_13=$color_05 # Base 0E - Bright Magenta
color_14=$color_06 # Base 0C - Bright Cyan
color_15="#CFD8DC" # Base 07 - Bright White
color_16="#B0BEC5" # Base 09
color_17="#90A4AE" # Base 0F
color_18="#78909C" # Base 01
color_19="#607D8B" # Base 02
color_20="#546E7A" # Base 04
color_21="#455A64" # Base 06
color_foreground="#FAFAFA" # Base 05
color_background="#212121" # Base 00

# %% base16_template_end%%

# Plugins Management
# =============================================================================

#  Tmux Plugin Manager
set -g @plugin 'tmux-plugins/tpm'

# Seamless navigation between tmux panes and vim splits
set -g @plugin 'christoomey/vim-tmux-navigator'

# Persists tmux environment across system restarts.
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Continuous saving of tmux environment. Automatic restore when tmux is started.
# Automatic tmux start when computer is turned on.
set -g @plugin 'tmux-plugins/tmux-continuum'

# ðŸŽ§ Spotify plugin for tmux
set -g @plugin 'xamut/tmux-spotify'

# ðŸš€ Quickly open urls on your terminal screen!
set -g @plugin 'wfxr/tmux-fzf-url'

# Plugins Configuration
# =============================================================================
# Global status configuration
# -----------------------------------------------------------------------------
# Update the status line every interval seconds.
set -g status-interval 1

# Set the position of the status line.
set -g status-position top

# Set window mode style.
set -g mode-style "fg=black,bg=yellow"

# command line style
set -g message-style "fg=black,bg=green"

# Set status line message command style. This is used for the command prompt
# with vi(1) keys when in command mode.
set -g message-command-style "fg=black,bg=red"

# Set status line style
set -g status-style "fg=white,bg=black"

# Set status line position
set -g status-position top

# Set global separator to be used with modules
set -g @right_separator 'î‚¸ '
set -g @left_separator 'î‚¼ '

# Window list status configuration
# -----------------------------------------------------------------------------
# Window segments separator
set -g window-status-separator ""

# Format of the window list
setw -g window-status-format "#(#{window} 'normal')"
setw -g window-status-current-format "#(#{window} 'current')"

# Right status
# -----------------------------------------------------------------------------
set -g status-right-length 150

status_right="#[fg=#000000]#{disk} #{uptime} #{net} #{mem} #{cpu} #{date} #{hostname} #{battery}"

set -g status-right "$status_right"

# Left status
# -----------------------------------------------------------------------------
set -g status-left-length 150

status_left="#{mode} #{online} #{session}#[fg=#212121,bg=#000000]î‚¼ "

set -g status-left "$status_left"

# Run plugins script
# =============================================================================
run '~/.config/tmux/plugins/tpm/tpm'
run '~/.config/tmux/plugins/tmux-sysstat/sysstat.tmux'

# ******************************************************************************
# VIM MODELINE
# vim: ft=tmux: fdm=indent
# ******************************************************************************
